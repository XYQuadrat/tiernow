// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
)

const createTier = `-- name: CreateTier :one
INSERT INTO tier (
    tierlist_uuid,
    name,
    "order"
) VALUES (
    ?,
    ?,
    ?
)
RETURNING id, tierlist_uuid, name, "order"
`

type CreateTierParams struct {
	TierlistUuid string
	Name         string
	Order        int64
}

func (q *Queries) CreateTier(ctx context.Context, arg CreateTierParams) (Tier, error) {
	row := q.db.QueryRowContext(ctx, createTier, arg.TierlistUuid, arg.Name, arg.Order)
	var i Tier
	err := row.Scan(
		&i.ID,
		&i.TierlistUuid,
		&i.Name,
		&i.Order,
	)
	return i, err
}

const createTierlist = `-- name: CreateTierlist :one
INSERT INTO tierlist (
    uuid,
    name
) VALUES (
    ?,
    ?
)
RETURNING uuid, name
`

type CreateTierlistParams struct {
	Uuid string
	Name string
}

func (q *Queries) CreateTierlist(ctx context.Context, arg CreateTierlistParams) (Tierlist, error) {
	row := q.db.QueryRowContext(ctx, createTierlist, arg.Uuid, arg.Name)
	var i Tierlist
	err := row.Scan(&i.Uuid, &i.Name)
	return i, err
}

const getTierlist = `-- name: GetTierlist :one
SELECT
    tierlist.uuid,
    tierlist.name,
    json_group_array(
        json_object(
            'id', tier.id,
            'name', tier.name,
            'order', tier."order",
            'entries', (
                SELECT
                    json_group_array(
                        json_object(
                            'id', entry.id,
                            'file_key', entry.file_key,
                            'order', entry."order"
                        )
                    )
                FROM entry
                WHERE entry.tier_id = tier.id
                ORDER BY entry."order"
            )
        )
    ) AS tiers,
    (
        SELECT
        json_group_array(
            json_object(
                'id', entry.id,
                'file_key', entry.file_key,
                'order', entry."order"
            )
        )
        FROM entry
        WHERE entry.tier_id IS NULL AND entry.tierlist_uuid = ?1
        ORDER BY entry."order"
    )
    AS unassigned_entries
FROM tierlist
LEFT JOIN tier ON tierlist.uuid = tier.tierlist_uuid
WHERE tierlist.uuid = ?1
GROUP BY tierlist.uuid
`

type GetTierlistRow struct {
	Uuid              string
	Name              string
	Tiers             interface{}
	UnassignedEntries interface{}
}

func (q *Queries) GetTierlist(ctx context.Context, tierlistUuid string) (GetTierlistRow, error) {
	row := q.db.QueryRowContext(ctx, getTierlist, tierlistUuid)
	var i GetTierlistRow
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Tiers,
		&i.UnassignedEntries,
	)
	return i, err
}

const setImageTier = `-- name: SetImageTier :one
UPDATE entry
SET tier_id = ?1
WHERE id = ?2
RETURNING id, tierlist_uuid, tier_id, file_key, "order"
`

type SetImageTierParams struct {
	TierID *int64
	ID     int64
}

func (q *Queries) SetImageTier(ctx context.Context, arg SetImageTierParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, setImageTier, arg.TierID, arg.ID)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.TierlistUuid,
		&i.TierID,
		&i.FileKey,
		&i.Order,
	)
	return i, err
}

const uploadImageMetadata = `-- name: UploadImageMetadata :one
INSERT INTO entry (
    tierlist_uuid,
    file_key,
    "order"
)
SELECT ?1, ?2, IFNULL(MAX("order"), 0) + 1
FROM entry 
WHERE entry.tierlist_uuid = ?1
RETURNING id, tierlist_uuid, tier_id, file_key, "order"
`

type UploadImageMetadataParams struct {
	TierlistUuid string
	FileKey      string
}

func (q *Queries) UploadImageMetadata(ctx context.Context, arg UploadImageMetadataParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, uploadImageMetadata, arg.TierlistUuid, arg.FileKey)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.TierlistUuid,
		&i.TierID,
		&i.FileKey,
		&i.Order,
	)
	return i, err
}
